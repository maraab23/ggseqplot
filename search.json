[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/ggseqplot.html","id":"prelude","dir":"Articles","previous_headings":"","what":"Prelude","title":"Introduction to ggseqplot","text":"Following Fasang Liao (2014), distinguish sequence representation summarization graphs. latter aggregate summarize information stored sequence data without plotting actual observed sequences. Given complexity sequence data, type plots focus one two dimensions information stored sequence data (Brzinsky-Fay, 2014). Among diverse members family summarization graphs sequence transitions plot, Kaplan-Meier survival curves, modal state plots, mean time plots, state distribution plots, entropy plots (Fasang & Liao, 2014; Raab & Struffolino, 2022). {ggseqplot} includes five summarization graphs: state distribution plots (ggseqdplot) entropy line plots (ggseqplot) modal state sequence plot (ggseqmsplot) mean time plot (ggseqmtplot) transition rate plots (ggseqtrplot) Whereas summarization graphs aggregate sequence data, representation plots always display actually observed sequences. basic form traditional sequence index plot observed sequences displayed. data sets several hundred cases kind visualization, however, reasonably applied issue overplotting. scenario individual sequences partly plotted top resulting graph inaccurate representation underlying sequence data. response issue alternative representation plots render subset sequences suggested. {ggseqplot} allows render traditional sequence index plots representation plots subsets sequences. Specifically, library contains following plot types: sequence index plot (ggseqiplot) sequence frequency plot (ggseqfplot) representative sequence plot (ggseqrplot) relative frequency sequence plot (ggseqrfplot) detailed discussion sequence visualization recommend following articles/book chapters: Brzinsky-Fay (2014), Fasang Liao (2014) Chapter 2 Raab & Struffolino (2022). exception transition rate plot plots listed can also produced {TraMineR}. total, two libraries provide much comprehensive set plots often allow options {ggseqplot}. Hence, experienced user base R’s plot (used render {TraMineR} plots), real need make acquainted {ggseqplot}. {ggseqplot} written like many R users prefer {ggplot2} base R’s plot environment visualizing data. {TraMineR} (Gabadinho et al., 2011) developed {ggplot2} (Wickham, 2016) popular today back many users familiar coding base R plots. date, however, many researchers students accustomed using {ggplot2} prefer draw related skills experiences instead learning refine base R plots just single purpose visualizing sequence data. vignette outlines sequence data generated TraMineR::seqdef reshaped plot ggplot2-typed figures using {ggseqplot}. specifically, gives overview general procedure depicts {TraMineR} {ggplot2} functions used render plots vignette illustrates appearance plots produced {ggseqplot} can changed using {ggplot2} functions extensions.","code":""},{"path":"/articles/ggseqplot.html","id":"setup-example","dir":"Articles","previous_headings":"","what":"Setup example","title":"Introduction to ggseqplot","text":"start loading required libraries defining sequence data plotted. draw examples {TraMineR} setting examples.  Note default figure size document specified : fig.width=8, fig.height=4.94","code":"## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ## Load and download (if necessary) required packages ---- ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   ## Save package names as a vector of strings pkgs <- c(\"colorspace\", \"ggplot2\", \"ggthemes\", \"hrbrthemes\",            \"patchwork\", \"purrr\", \"TraMineR\")   ## Install uninstalled packages lapply(pkgs[!(pkgs %in% installed.packages())],         install.packages, repos = getOption(\"repos\")[\"CRAN\"])   ## Load all packages to library and adjust options lapply(pkgs, library, character.only = TRUE)  ## Don't forget to load ggseqplot library(ggseqplot) ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ## Creating state sequence objects from example data sets ---- ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  ## biofam data data(biofam)  biofam.lab <- c(\"Parent\", \"Left\", \"Married\", \"Left+Marr\",                 \"Child\", \"Left+Child\", \"Left+Marr+Child\", \"Divorced\")  biofam.seq <- seqdef(biofam[501:600, ], 10:25, # we only use a subsample                      labels = biofam.lab,                      weights = biofam$wp00tbgs[501:600])  ## actcal data data(actcal)  actcal.lab <- c(\"> 37 hours\", \"19-36 hours\", \"1-18 hours\", \"no work\")  actcal.seq <- seqdef(actcal,13:24,                      labels=actcal.lab)  ## ex1 data data(ex1) ex1.seq <- seqdef(ex1, 1:13,                    weights=ex1$weights)"},{"path":"/articles/ggseqplot.html","id":"technicalities","dir":"Articles","previous_headings":"","what":"Technicalities","title":"Introduction to ggseqplot","text":"general, {ggseqplot} functions operate similar way: extract data plotted using state sequence object generated TraMineR::seqdef staring point. functions either simply use (subset ) sequence data stored object call {TraMineR} functions TraMineR::seqstatd obtain information plotted. hood {ggseqplot} reshapes data visualize using {ggplot2} functions. Usually means data reshaped long (tidy) format. following example illustrates procedure case state distribution plot. cross-sectional state distributions across positions sequence data can obtained : calling ggseqdplot distributional data reshaped long data set every row stores (weighted) relative frequency given state given position along sequence. example data actcal.seq contain sequences length 12 alphabet comprising 4 states. reshaped data serving source {ggplot2} call thus contain 12×4=4812\\times4=48 rows. group vector specified, respective data comprise 48 rows group. data set produced ggseqdplot can accessed function’s output assigned object. resulting list object stores data first element (named data). data right shape {ggseqplot} functions produce graphs using {ggplot2} functions. case state distribution plot, instance, ggseqdplot renders stacked bar charts sequence position using ggplot2::geom_bar. following table gives overview important internal function calls used render different plot types {ggseqplot} appearance plots generated {ggseqplot} can adjusted just like every ggplot (e.g., changing theme scale using + respective functions). Representative sequence plots relative frequency sequence plots, however, behave differently composed multiple plots arranged {patchwork} library. following section illustrates appearance plots can changed","code":"seqstatd(actcal.seq) #>   [State frequencies] #>   jan00 feb00 mar00 apr00 may00 jun00 jul00 aug00 sep00 oct00 nov00 dec00 #> A 0.421 0.420 0.421 0.417 0.419  0.42  0.42  0.42  0.42 0.418 0.414 0.415 #> B 0.162 0.162 0.162 0.162 0.162  0.16  0.16  0.17  0.17 0.169 0.170 0.171 #> C 0.098 0.098 0.098 0.097 0.097  0.10  0.10  0.10  0.10 0.096 0.096 0.098 #> D 0.320 0.321 0.320 0.324 0.322  0.32  0.32  0.31  0.31 0.318 0.320 0.317 #>  #>    [Valid states] #>   jan00 feb00 mar00 apr00 may00 jun00 jul00 aug00 sep00 oct00 nov00 dec00 #> N  2000  2000  2000  2000  2000  2000  2000  2000  2000  2000  2000  2000 #>  #>    [Entropy index] #>   jan00 feb00 mar00 apr00 may00 jun00 jul00 aug00 sep00 oct00 nov00 dec00 #> H   0.9   0.9   0.9   0.9   0.9   0.9   0.9  0.91  0.91   0.9  0.91  0.91 dplot <- ggseqdplot(actcal.seq) dplot$data #> # A tibble: 48 × 6 #>    group state      k     x     value grouplab            #>    <fct> <fct>      <fct> <fct> <dbl> <fct>               #>  1 1     > 37 hours jan00 1     0.421 Rel. Freq. (n=2000) #>  2 1     > 37 hours feb00 2     0.420 Rel. Freq. (n=2000) #>  3 1     > 37 hours mar00 3     0.422 Rel. Freq. (n=2000) #>  4 1     > 37 hours apr00 4     0.418 Rel. Freq. (n=2000) #>  5 1     > 37 hours may00 5     0.420 Rel. Freq. (n=2000) #>  6 1     > 37 hours jun00 6     0.42  Rel. Freq. (n=2000) #>  7 1     > 37 hours jul00 7     0.422 Rel. Freq. (n=2000) #>  8 1     > 37 hours aug00 8     0.420 Rel. Freq. (n=2000) #>  9 1     > 37 hours sep00 9     0.418 Rel. Freq. (n=2000) #> 10 1     > 37 hours oct00 10    0.418 Rel. Freq. (n=2000) #> # ℹ 38 more rows"},{"path":[]},{"path":"/articles/ggseqplot.html","id":"the-default-case","dir":"Articles","previous_headings":"Changing the appearance of plots","what":"The default case","title":"Introduction to ggseqplot","text":"mentioned , plots rendered {ggseqplot} class c(\"gg\", \"ggplot\") can adjusted just like plots rendered {ggplot2}","code":""},{"path":"/articles/ggseqplot.html","id":"example-1-state-distribution-plot","dir":"Articles","previous_headings":"Changing the appearance of plots > The default case","what":"Example 1: State distribution plot","title":"Introduction to ggseqplot","text":"first example illustrate state distribution plot. start basic version plot visualizing state distributions actcal.seq without changing defaults.  proceed illustrating {ggplot2} functions & extensions can used refine default outcome. Just like every {ggplot2} figure appearance plots generated {ggseqplot} functions can dramatically changed adjustments:  following example illustrate {ggplot2} functions & extensions composing figure comprising two plots produced ggseqdplot. visualize data first plot considers weights. addition state distributions plots display accompanying entropies line plot (geom_line). Finally, plots brought together using {patchwork} library (Pedersen, 2020).","code":"# ggseqplot::ggseqdplot ggseqdplot(actcal.seq) ggseqdplot(actcal.seq) +   scale_fill_discrete_sequential(\"heat\") +   scale_x_discrete(labels = month.abb) +   labs(title = \"State distribution plot\",        x = \"Month\") +   guides(fill=guide_legend(title=\"Alphabet\")) +   theme_ipsum(base_family = \"\") + # ensures that this works on different OS   theme(plot.title = element_text(size = 30,                                    margin=margin(0,0,20,0)),         plot.title.position = \"plot\") # Save plot using weights p1 <- ggseqdplot(ex1.seq,                   with.entropy = TRUE) +    ggtitle(\"Weighted data\")  # Save same plot without using weights p2 <- ggseqdplot(ex1.seq,                   with.entropy = TRUE,                  weighted = FALSE) +    ggtitle(\"Unweighted data\")  # Arrange and refine plots using patchwork p1 + p2 +    plot_layout(guides = \"collect\") &   scale_fill_manual(values= canva_palettes$`Fun and tropical`[1:4]) &   theme_ipsum(base_family = \"\") &   theme(plot.title = element_text(size = 20,                                   hjust = 0.5),         legend.position = \"bottom\",         legend.title = element_blank())"},{"path":"/articles/ggseqplot.html","id":"example-2-transition-rate-plot","dir":"Articles","previous_headings":"Changing the appearance of plots > The default case","what":"Example 2: Transition rate plot","title":"Introduction to ggseqplot","text":"second set examples illustrates refine figure combined transition rate plots. ggseqtrplot calls TraMineR::seqtrate obtain transition rates states alphabet. TraMineR::seqtrate stores rates symmetrical matrix internally reshaped long format one row every combination states (.e., squared size sequence alphabet) ggseqdplot. reshaped data input {ggplot2} call using geom_tile. start simple example takes sequence data group argument inputs. output faceted plot visualizing two transition rate matrices DSS sequence data.  second example specify additional arguments utilize {patchwork} library compose figure compares transition matrices sequence stored STS DSS format. use x_n.dodge = 2 prevent overlapping state labels x-axis, slightly reduce labels size value labels displayed within tiles, use dss = FALSE compute display transition rates STS sequences.  grouped version plot composed figure contains y-axis title labels twice. can changed small adjustments corresponding theme arguments.","code":"ggseqtrplot(actcal.seq,              group = actcal$sex) #>  [>] computing transition probabilities for states A/B/C/D ... #>  [>] computing transition probabilities for states A/B/C/D ... p1 <- ggseqtrplot(biofam.seq,                    dss = FALSE,                    x_n.dodge = 2,                   labsize = 3) +   ggtitle(\"STS Sequences\") +   theme(plot.margin = unit(c(5,10,5,5), \"points\")) #>  [>] computing transition probabilities for states 0/1/2/3/4/5/6/7 ...  p2 <- ggseqtrplot(biofam.seq,                    x_n.dodge = 2,                   labsize = 3) +     ggtitle(\"DSS Sequences\") +   theme(plot.margin = unit(c(5,5,5,10), \"points\")) #>  [>] computing transition probabilities for states 0/1/2/3/4/5/6/7 ...  p1 + p2 &   theme(plot.title = element_text(size = 20,                                   hjust = 0.5)) p2 <- p2 +   theme(axis.text.y = element_blank(),          axis.title.y = element_blank())  p1 + p2 &   theme(plot.title = element_text(size = 20,                                   hjust = 0.5))"},{"path":"/articles/ggseqplot.html","id":"example-3-flipping-coordinates","dir":"Articles","previous_headings":"Changing the appearance of plots > The default case","what":"Example 3: Flipping coordinates","title":"Introduction to ggseqplot","text":"conclude section illustrating also possible flip coordinates plots rendered {ggseqplot}, procedure widely used {ggplot2} universe (although coordinates also swapped aes(x, y, ...) specification). example illustrate procedure mean time plot sequence index plot. always present , default plot flipped version:   example flipped plot might greater accordance people’s aesthetic preferences, flipping coordinates case sequence index plots might opinionated design choice. scholars prefer display time horizontal axis. However, favor time run bottom top (like Piccarreta Lior (2010)) instead left right, preferences can easily met.","code":"## default plot ggseqmtplot(actcal.seq, no.n = TRUE, error.bar = \"SE\") ## flipped version ggseqmtplot(actcal.seq, no.n = TRUE, error.bar = \"SE\") +  coord_flip() +  theme(axis.text.y=element_blank(),        axis.ticks.y = element_blank(),        panel.grid.major.y = element_blank(),        legend.position = \"top\") ## default plot ggseqiplot(actcal.seq, sortv = \"from.end\") +    scale_x_discrete(labels = month.abb)  #> Scale for x is already present. #> Adding another scale for x, which will replace the existing scale. ## flipped version ggseqiplot(actcal.seq, sortv = \"from.end\") +    scale_x_discrete(labels = month.abb) +   coord_flip() #> Scale for x is already present. #> Adding another scale for x, which will replace the existing scale."},{"path":"/articles/ggseqplot.html","id":"the-special-case-of-combined-plots","dir":"Articles","previous_headings":"Changing the appearance of plots","what":"The special case of combined plots","title":"Introduction to ggseqplot","text":"Two types plots differ {ggseqplot} functions composed two subplots arranged joint figure {patchwork} library. output functions changed functions. details {patchwork} library recommend package’s website.","code":""},{"path":"/articles/ggseqplot.html","id":"example-4-annotation-and-themes","dir":"Articles","previous_headings":"Changing the appearance of plots > The special case of combined plots","what":"Example 4: Annotation and themes","title":"Introduction to ggseqplot","text":"adjustments combined {patchwork} plot pretty similar default {ggplot2} procedure. example change theme add title plot. Note corresponding functions added + & instead.   want manipulate appearance specific plot, however, default code might work. want change labels index plot, instance, following code produce desired result, scale_x_discrete change appearance boxplot, .e. last plot used composing plot {patchwork}.  appearance subplots, however, can changed save composite plot adjust components.","code":"## compute dissimilarity matrix required for plot diss <- seqdist(biofam.seq, method = \"LCS\") #>  [>] 100 sequences with 8 distinct states #>  [>] creating a 'sm' with a substitution cost of 2 #>  [>] creating 8x8 substitution-cost matrix using 2 as constant value #>  [>] 76 distinct  sequences #>  [>] min/max sequence lengths: 16/16 #>  [>] computing distances using the LCS metric #>  [>] elapsed time: 0.017 secs  ## Relative Frequency Sequence Plot ## default version ggseqrfplot(biofam.seq, diss = diss, k = 12)  #>  [>] Using k=12 frequency groups with grp.meth='prop' #>  [>] Pseudo/medoid-based-R2: 0.367766 #>  [>] Pseudo/medoid-based-F statistic: 5.268049, p-value: 1.655783e-06 ## adjusted version ggseqrfplot(biofam.seq, diss = diss, k = 12) &   theme_ipsum(base_family = \"\") &   theme(legend.position = \"bottom\",         legend.title = element_blank(),         plot.title = element_text(size = 12)) &   plot_annotation(title = \"Relative Frequency Sequence Plot\") #>  [>] Using k=12 frequency groups with grp.meth='prop' #>  [>] Pseudo/medoid-based-R2: 0.367766 #>  [>] Pseudo/medoid-based-F statistic: 5.268049, p-value: 1.655783e-06 ggseqrfplot(biofam.seq, diss = diss, k = 12) +   scale_x_discrete(labels = 15:30) #>  [>] Using k=12 frequency groups with grp.meth='prop' #>  [>] Pseudo/medoid-based-R2: 0.367766 #>  [>] Pseudo/medoid-based-F statistic: 5.268049, p-value: 1.655783e-06 ## save & view original plot p <- ggseqrfplot(biofam.seq, diss = diss, k = 12) #>  [>] Using k=12 frequency groups with grp.meth='prop' #>  [>] Pseudo/medoid-based-R2: 0.367766 #>  [>] Pseudo/medoid-based-F statistic: 5.268049, p-value: 1.655783e-06 p ## change appearance of sub-plots  ## first component: index plot p[[1]] <- p[[1]] +   scale_x_discrete(labels = 15:30) #> Scale for x is already present. #> Adding another scale for x, which will replace the existing scale.  ## second component: boxplot p[[2]] <- p[[2]] + labs(title = \"Changed title\")  ## adjusted plot p"},{"path":"/articles/ggseqplot.html","id":"example-5-the-complex-case-of-grouped-rplots","dir":"Articles","previous_headings":"Changing the appearance of plots > The special case of combined plots","what":"Example 5: The complex case of grouped rplots","title":"Introduction to ggseqplot","text":"Note things become little bit complex case grouped representative sequence plot. plot group contributes two subplots. One providing information “quality” representative sequences, another one containing corresponding index plots. want change x-axis labels following plot, extract change index plots appear second row combined plot. plots arranged row. Hence index plots subplots 3 4","code":"## Compute a pairwise dissimilarity matrix diss <- seqdist(actcal.seq, method = \"LCS\") #>  [>] 2000 sequences with 4 distinct states #>  [>] creating a 'sm' with a substitution cost of 2 #>  [>] creating 4x4 substitution-cost matrix using 2 as constant value #>  [>] 186 distinct  sequences #>  [>] min/max sequence lengths: 12/12 #>  [>] computing distances using the LCS metric #>  [>] elapsed time: 0.263 secs  ## original plot p <- ggseqrplot(actcal.seq,                  diss = diss,                 nrep = 3,                 group = actcal$sex) #>  [>] number of objects (sum of weights): 884 #>  [>] max. distance: 24 #>  [>] neighborhood radius: 2.4 #>  [>] 3 representative(s) selected #>  [>] 80 distinct sequence(s) #>  [>] number of objects (sum of weights): 1116 #>  [>] max. distance: 24 #>  [>] neighborhood radius: 2.4 #>  [>] 3 representative(s) selected #>  [>] 144 distinct sequence(s) p ## adjusted sequence index subplots p[[3]] <- p[[3]] +   scale_x_discrete(labels = month.abb)  #> Scale for x is already present. #> Adding another scale for x, which will replace the existing scale.  p[[4]] <- p[[4]] +   scale_x_discrete(labels = month.abb)  #> Scale for x is already present. #> Adding another scale for x, which will replace the existing scale.  p"},{"path":"/articles/ggseqplot.html","id":"example-6-what-about-grouped-rfplots","dir":"Articles","previous_headings":"Changing the appearance of plots > The special case of combined plots","what":"Example 6: What about grouped rfplots?","title":"Introduction to ggseqplot","text":"Grouped rfplots currently implemented ggseqrfplot created manually using {patchwork} library. following example create rfplots groups (“Men” “Women”), proceed slightly misusing {patchwork}’s tag annotation assigning group-specific tags first plot row final patchwork plot, removing legend upper plot panel (p$man), arranging adjusted patches final plot two stacked panels. Technically speaking resulting plot nested patchwork plot. According documentation {patchwork} []t important note plot annotations effect top-level patchwork. annotation added nested patchworks (currently) lost. need annotations nested patchwork ’ll need wrap wrap_elements() side-effect alignment longer works.1 reason group-specific titles added patchwork::plot_annotation ggplot2::ggtitle reverted use tags instead.","code":"diss <- seqdist(biofam.seq, method = \"LCS\") #>  [>] 100 sequences with 8 distinct states #>  [>] creating a 'sm' with a substitution cost of 2 #>  [>] creating 8x8 substitution-cost matrix using 2 as constant value #>  [>] 76 distinct  sequences #>  [>] min/max sequence lengths: 16/16 #>  [>] computing distances using the LCS metric #>  [>] elapsed time: 0.016 secs  sex <- biofam[501:600, \"sex\"]  p <- map2(   levels(sex), # input x   c(\"Men\", \"Women\"), # input y   function(x, y) {     p <- ggseqrfplot(biofam.seq[sex == x,],                      diss = diss[sex == x,sex == x],                      k = 12)     p[[1]] <- p[[1]] + labs(tag = y)     return(p)     }   ) #>  [>] Using k=12 frequency groups with grp.meth='prop' #>  [>] Pseudo/medoid-based-R2: 0.5448432 #>  [>] Pseudo/medoid-based-F statistic: 3.408139, p-value: 0.003407164 #>  [>] Using k=12 frequency groups with grp.meth='prop' #>  [>] Pseudo/medoid-based-R2: 0.5263291 #>  [>] Pseudo/medoid-based-F statistic: 5.687386, p-value: 4.537004e-06  names(p) <- levels(sex)  (p$man & theme(legend.position = \"none\")) / p$woman"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marcel Raab. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Raab, M. (2022): ggseqplot: Render Sequence Plots using 'ggplot2'. https://maraab23.github.io/ggseqplot","code":"@Manual{,   title = {ggseqplot: Render Sequence Plots using 'ggplot2'},   author = {Marcel Raab},   year = {2022},   url = {https://maraab23.github.io/ggseqplot/}, }"},{"path":"/index.html","id":"ggseqplot-ggplotify-sequence-data-plots-","dir":"","previous_headings":"","what":"Render Sequence Plots using ggplot2","title":"Render Sequence Plots using ggplot2","text":"main goal {ggseqplot} provide functions reproduce sequence plots {TraMineR}’s seqplot using {ggplot2}. plots produced basis state sequence objects defined TraMineR::seqdef. package automates reshaping plotting sequence data. library literally builds excellent work {TraMineR} {ggplot2} developers uses several functions produce ggplot2-flavored figures. Note, library written personally dislike plots produced {TraMineR}, rather normally using {ggplot2} instead base R’s plot environment visualizing data. {TraMineR} developed {ggplot2} popular today back many users familiar coding base R plots. date, however, many researchers students accustomed using {ggplot2} prefer draw related skills experiences instead learning refine base R plots just single purpose visualizing sequence data. {ggseqplot} contains following functions: ggseqdplot (equivalent TraMineR::seqdplot) ggseqeplot (equivalent TraMineRextras::seqplot.tentrop) ggseqmsplot (equivalent TraMineR::seqmsplot) ggseqmtplot (equivalent TraMineR::seqmtplot) ggstrqeplot (based transitions rates computed TraMineR::seqtrate) ggseqiplot (equivalent TraMineR::seqIplot) ggseqfplot (equivalent TraMineR::seqfplot) ggseqrplot (equivalent TraMineR::seqrplot) ggseqrfplot (equivalent TraMineRextras::seqplot.rf) change requests find errors, create issue github send email. complementing vignette outlines {ggseqplot} reshapes sequence data generated {TraMineR} functions visualize using {ggplot2}. Moreover, illustrates adjust baseline output using familiar {ggplot2} functions (add-ons).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Render Sequence Plots using ggplot2","text":"can install CRAN version {ggseqplot} typing: development version can installed :","code":"install.packages(\"ggseqplot\") devtools::install_github(\"maraab23/ggseqplot\")"},{"path":"/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Render Sequence Plots using ggplot2","text":"like thank Gilbert Ritschard, Tim Liao, Emanuela Struffolino comments earlier versions library.","code":""},{"path":"/reference/ggseqdplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequence Distribution Plot — ggseqdplot","title":"Sequence Distribution Plot — ggseqdplot","text":"Function rendering state distribution plots ggplot2 wickham2016ggseqplot instead base R's plot function used TraMineR::seqplot gabadinho2011ggseqplot.","code":""},{"path":"/reference/ggseqdplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequence Distribution Plot — ggseqdplot","text":"","code":"ggseqdplot(   seqdata,   no.n = FALSE,   group = NULL,   dissect = NULL,   weighted = TRUE,   with.missing = FALSE,   border = FALSE,   with.entropy = FALSE,   linetype = \"dashed\",   linecolor = \"black\",   linewidth = 1,   facet_ncol = NULL,   facet_nrow = NULL,   ... )"},{"path":"/reference/ggseqdplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequence Distribution Plot — ggseqdplot","text":"seqdata State sequence object (class stslist) created TraMineR::seqdef function. .n specifies number (weighted) sequences shown (default TRUE) group vector length sequence data indicating group membership. NULL, distinct plot generated level group. dissect \"row\" \"col\" specified separate distribution plots instead stacked plot displayed; \"row\" \"col\" display distributions one row one column respectively; default NULL weighted Controls weights (specified TraMineR::seqdef) used. Default TRUE, .e. available weights used .missing Specifies missing states considered computing state distributions (default FALSE). border TRUE bars plotted black outline; default FALSE (also accepts NULL) .entropy add line plot cross-sectional entropies sequence position linetype linetype entropy subplot (.entropy==TRUE) can specified integer (0-6) name (0 = blank, 1 = solid, 2 = dashed, 3 = dotted, 4 = dotdash, 5 = longdash, 6 = twodash); ; default \"dashed\" linecolor Specifies color entropy line .entropy==TRUE; default \"black\" linewidth Specifies width entropy line .entropy==TRUE; default 1 facet_ncol Number columns faceted (.e. grouped) plot facet_nrow Number rows faceted (.e. grouped) plot ... group specified additional arguments ggplot2::facet_wrap \"labeller\" \"strip.position\" can used change appearance plot. work dissect used","code":""},{"path":"/reference/ggseqdplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequence Distribution Plot — ggseqdplot","text":"sequence distribution plot created using ggplot2. stored object resulting list object (class gg ggplot) also contains data used rendering plot.","code":""},{"path":"/reference/ggseqdplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sequence Distribution Plot — ggseqdplot","text":"Sequence distribution plots visualize distribution states rendering series stacked bar charts position sequence. Although type plot used life course studies several decades (see blossfeld1987;textualggseqplot early application), noted size different bars stacked bar charts might difficult compare - particularly alphabet comprises many states  wilke2019ggseqplot. issue can addressed breaking aggregated  distribution specifying dissect argument.  Moreover, important keep mind plot type visualize individual trajectories; instead displays aggregated distributional information (repeated cross-sections). detailed discussion  type sequence visualization see, example, brzinsky-fay2014;textualggseqplot, fasang2014;textualggseqplot, raab2022;textualggseqplot. function uses TraMineR::seqstatd obtain state distributions (entropy values). requires input data (seqdata) stored state sequence object (class stslist) created TraMineR::seqdef function. state distributions reshaped long data format enable plotting ggplot2. stacked bars rendered calling geom_bar; entropy = TRUE entropy values plotted geom_line. group dissect argument specified sub-plots produced using facet_wrap. specified plots rendered facet_grid. data specifications used rendering plot can obtained storing plot object. appearance plot can adjusted just like every ggplot (e.g., changing theme scale using + respective functions).","code":""},{"path":[]},{"path":"/reference/ggseqdplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sequence Distribution Plot — ggseqdplot","text":"Marcel Raab","code":""},{"path":"/reference/ggseqdplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequence Distribution Plot — ggseqdplot","text":"","code":"# Use example data from TraMineR: actcal data set data(actcal)  # We use only a sample of 300 cases set.seed(1) actcal <- actcal[sample(nrow(actcal), 300), ] actcal.lab <- c(\"> 37 hours\", \"19-36 hours\", \"1-18 hours\", \"no work\") actcal.seq <- seqdef(actcal, 13:24, labels = actcal.lab) #>  [>] 4 distinct states appear in the data:  #>      1 = A #>      2 = B #>      3 = C #>      4 = D #>  [>] state coding: #>        [alphabet]  [label]  [long label]  #>      1  A           A        > 37 hours #>      2  B           B        19-36 hours #>      3  C           C        1-18 hours #>      4  D           D        no work #>  [>] 300 sequences in the data set #>  [>] min/max sequence length: 12/12  # state distribution plots; grouped by sex # with TraMineR::seqplot seqdplot(actcal.seq, group = actcal$sex)  # with ggseqplot ggseqdplot(actcal.seq, group = actcal$sex)  # with ggseqplot applying a few additional arguments, e.g. entropy line ggseqdplot(actcal.seq, group = actcal$sex,            no.n = TRUE, with.entropy = TRUE, border = TRUE)   # break down the stacked plot to ease comparisons of distributions ggseqdplot(actcal.seq, group = actcal$sex, dissect = \"row\")   # make use of ggplot functions for modifying the plot ggseqdplot(actcal.seq) +   scale_x_discrete(labels = month.abb) +   labs(title = \"State distribution plot\", x = \"Month\") +   guides(fill = guide_legend(title = \"Alphabet\")) +   theme_classic() +   theme(plot.title = element_text(size = 30,                                   margin = margin(0, 0, 20, 0)),     plot.title.position = \"plot\") #> Scale for x is already present. #> Adding another scale for x, which will replace the existing scale."},{"path":"/reference/ggseqeplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequence Entropy Plot — ggseqeplot","title":"Sequence Entropy Plot — ggseqeplot","text":"Function plotting development cross-sectional entropies across sequence positions ggplot2 wickham2016ggseqplot instead base R's plot function used TraMineR::seqplot gabadinho2011ggseqplot. TraMineR::seqHtplot group-specific entropy lines displayed common plot.","code":""},{"path":"/reference/ggseqeplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequence Entropy Plot — ggseqeplot","text":"","code":"ggseqeplot(   seqdata,   group = NULL,   weighted = TRUE,   with.missing = FALSE,   linewidth = 1,   linecolor = \"Okabe-Ito\",   gr.linetype = FALSE )"},{"path":"/reference/ggseqeplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequence Entropy Plot — ggseqeplot","text":"seqdata State sequence object (class stslist) created TraMineR::seqdef function. group grouping variable specified plot shows one line group weighted Controls weights (specified TraMineR::seqdef) used. Default TRUE, .e. available weights used .missing Specifies missing states considered computing entropy index (default FALSE). linewidth Specifies entropy line; default 1 linecolor Specifies color palette line(s); default \"Okabe-Ito\" contains 9 colors (first black). 9 lines rendered, user specify alternative color palette gr.linetype Specifies line type vary group; hence relevant group argument specified; default FALSE","code":""},{"path":"/reference/ggseqeplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequence Entropy Plot — ggseqeplot","text":"line plot entropy values sequence position. stored object resulting list object also contains data (long format) used rendering plot.","code":""},{"path":"/reference/ggseqeplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sequence Entropy Plot — ggseqeplot","text":"function uses TraMineR::seqstatd compute entropies. requires input data (seqdata) stored state sequence object (class stslist) created TraMineR::seqdef function. entropy values plotted geom_line. data specifications used rendering plot can obtained storing plot object. appearance plot can adjusted just like every ggplot (e.g., changing theme scale using + respective functions).","code":""},{"path":[]},{"path":"/reference/ggseqeplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sequence Entropy Plot — ggseqeplot","text":"Marcel Raab","code":""},{"path":"/reference/ggseqeplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequence Entropy Plot — ggseqeplot","text":"","code":"# Use example data from TraMineR: actcal data set data(actcal)  # We use only a sample of 300 cases set.seed(1) actcal <- actcal[sample(nrow(actcal), 300), ] actcal.lab <- c(\"> 37 hours\", \"19-36 hours\", \"1-18 hours\", \"no work\") actcal.seq <- seqdef(actcal, 13:24, labels = actcal.lab) #>  [>] 4 distinct states appear in the data:  #>      1 = A #>      2 = B #>      3 = C #>      4 = D #>  [>] state coding: #>        [alphabet]  [label]  [long label]  #>      1  A           A        > 37 hours #>      2  B           B        19-36 hours #>      3  C           C        1-18 hours #>      4  D           D        no work #>  [>] 300 sequences in the data set #>  [>] min/max sequence length: 12/12  # sequences sorted by age in 2000 and grouped by sex # with TraMineR::seqplot (entropies shown in two separate plots) seqHtplot(actcal.seq, group = actcal$sex)  # with ggseqplot (entropies shown in one plot) ggseqeplot(actcal.seq, group = actcal$sex)  ggseqeplot(actcal.seq, group = actcal$sex, gr.linetype = TRUE)   # manual color specification ggseqeplot(actcal.seq, linecolor = \"darkgreen\")  ggseqeplot(actcal.seq, group = actcal$sex,            linecolor = c(\"#3D98D3FF\", \"#FF363CFF\"))"},{"path":"/reference/ggseqfplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequence Frequency Plot — ggseqfplot","title":"Sequence Frequency Plot — ggseqfplot","text":"Function rendering sequence index plot frequent sequences state sequence object using ggplot2 wickham2016ggseqplot instead base R's plot function used TraMineR::seqplot / TraMineR::plot.stslist.freq gabadinho2011ggseqplot.","code":""},{"path":"/reference/ggseqfplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequence Frequency Plot — ggseqfplot","text":"","code":"ggseqfplot(   seqdata,   group = NULL,   ranks = 1:10,   weighted = TRUE,   border = FALSE,   proportional = TRUE,   ylabs = \"total\",   no.coverage = FALSE,   facet_ncol = NULL,   facet_nrow = NULL )"},{"path":"/reference/ggseqfplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequence Frequency Plot — ggseqfplot","text":"seqdata State sequence object (class stslist) created TraMineR::seqdef function. group vector length sequence data indicating group membership. NULL, distinct plot generated level group. ranks specifies frequent sequences plotted; default first ten (1:10); set 0 sequences displayed weighted Controls weights (specified TraMineR::seqdef) used. Default TRUE, .e. available weights used border TRUE bars plotted black outline; default FALSE (also accepts NULL) proportional TRUE (default), sequence heights displayed proportional frequencies ylabs defines appearance y-axis labels; default (\"total\") labels min max (.e. cumulative relative frequency); \"share\" labels indicate relative frequency displayed sequence (note: overlapping labels removed) .coverage specifies information total coverage shown caption part group/facet label ylabs == \"share\" (default TRUE) facet_ncol Number columns faceted (.e. grouped) plot facet_nrow Number rows faceted (.e. grouped) plot","code":""},{"path":"/reference/ggseqfplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequence Frequency Plot — ggseqfplot","text":"sequence frequency plot created using ggplot2. stored object resulting list object (class gg ggplot) also contains data used rendering plot.","code":""},{"path":"/reference/ggseqfplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sequence Frequency Plot — ggseqfplot","text":"subset displayed sequences obtained internal call TraMineR::seqtab. extracted sequences plotted call ggseqiplot uses ggplot2::geom_rect render sequences. data specifications used rendering plot can obtained storing plot object. appearance plot can adjusted just like every ggplot (e.g., changing theme scale using + respective functions). Experienced ggplot2 users might notice customized labeling y-axes faceted plots (.e. plots specified group argument). achieved utilizing helpful ggh4x library.","code":""},{"path":[]},{"path":[]},{"path":"/reference/ggseqfplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sequence Frequency Plot — ggseqfplot","text":"Marcel Raab","code":""},{"path":"/reference/ggseqfplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequence Frequency Plot — ggseqfplot","text":"","code":"# Use example data from TraMineR: actcal data set data(actcal)  # We use only a sample of 300 cases set.seed(1) actcal <- actcal[sample(nrow(actcal), 300), ] actcal.lab <- c(\"> 37 hours\", \"19-36 hours\", \"1-18 hours\", \"no work\") actcal.seq <- seqdef(actcal, 13:24, labels = actcal.lab) #>  [>] 4 distinct states appear in the data:  #>      1 = A #>      2 = B #>      3 = C #>      4 = D #>  [>] state coding: #>        [alphabet]  [label]  [long label]  #>      1  A           A        > 37 hours #>      2  B           B        19-36 hours #>      3  C           C        1-18 hours #>      4  D           D        no work #>  [>] 300 sequences in the data set #>  [>] min/max sequence length: 12/12  # sequence frequency plot # with TraMineR::seqplot seqfplot(actcal.seq)  # with ggseqplot ggseqfplot(actcal.seq)  # with ggseqplot applying additional arguments and some layout changes ggseqfplot(actcal.seq,            group = actcal$sex,            ranks = 1:5,            ylabs = \"share\") +   scale_x_discrete(breaks = 1:12,                    labels = month.abb,                    expand = expansion(add = c(0.2, 0))) #> Scale for x is already present. #> Adding another scale for x, which will replace the existing scale."},{"path":"/reference/ggseqiplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequence Index Plot — ggseqiplot","title":"Sequence Index Plot — ggseqiplot","text":"Function rendering sequence index plots ggplot2 wickham2016ggseqplot instead base R's plot function used TraMineR::seqplot gabadinho2011ggseqplot.","code":""},{"path":"/reference/ggseqiplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequence Index Plot — ggseqiplot","text":"","code":"ggseqiplot(   seqdata,   no.n = FALSE,   group = NULL,   sortv = NULL,   weighted = TRUE,   border = FALSE,   facet_scale = \"free_y\",   facet_ncol = NULL,   facet_nrow = NULL,   ... )"},{"path":"/reference/ggseqiplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequence Index Plot — ggseqiplot","text":"seqdata State sequence object (class stslist) created TraMineR::seqdef function. .n specifies number (weighted) sequences shown part y-axis title group/facet title (default TRUE) group vector length sequence data indicating group membership. NULL, distinct plot generated level group. sortv Vector numerical values sorting sequences sorting method (either \".start\" \".end\"). See details. weighted Controls weights (specified TraMineR::seqdef) used. Default TRUE, .e. available weights used border TRUE bars plotted black outline; default FALSE (also accepts NULL) facet_scale Specifies y-scale faceted plot free (\"free_y\" default) \"fixed\" facet_ncol Number columns faceted (.e. grouped) plot facet_nrow Number rows faceted (.e. grouped) plot ... group specified additional arguments ggplot2::facet_wrap \"labeller\" \"strip.position\" can used change appearance plot","code":""},{"path":"/reference/ggseqiplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequence Index Plot — ggseqiplot","text":"sequence index plot. stored object resulting list object also contains data (spell format) used rendering plot.","code":""},{"path":"/reference/ggseqiplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sequence Index Plot — ggseqiplot","text":"Sequence index plots introduced scherer2001;textualggseqplot display sequence horizontally stacked bar line. detailed discussion type sequence visualization see, example, brzinsky-fay2014;textualggseqplot, fasang2014;textualggseqplot, raab2022;textualggseqplot. function uses TraMineR::seqformat reshape seqdata stored wide format spell/episode format. data reshaped long format, .e. every sequence row data represents one specific sequence position. example, 5 sequences length 10, long file 50 rows. case sequences unequal length every sequence contribute number rows long data. reshaped data used input rendering index plot using ggplot2's geom_rect. ggseqiplot uses geom_rect instead geom_tile allows straight forward implementation weights. weights specified seqdata weighted=TRUE sequence height corresponds weight. weights grouping variable used, facet_scale=\"fixed\" values y-axis labeled, ggplot2 reasonably allow varying scales facet scale fixed. sortv specified, sequences arranged order values. sortv=\".start\" sequence data sorted according states alphabet ascending order starting first sequence position, drawing succeeding positions case ties. Likewise, sortv=\".end\" sorts reversed version sequence data, starting final sequence position turning preceding positions case ties. Note default aspect ratio ggseqiplot different TraMineR::seqIplot. obvious border=TRUE. can change ratio either adding code ggseqiplot specifying ratio saving code ggsave.","code":""},{"path":[]},{"path":"/reference/ggseqiplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sequence Index Plot — ggseqiplot","text":"Marcel Raab","code":""},{"path":"/reference/ggseqiplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequence Index Plot — ggseqiplot","text":"","code":"# Use example data from TraMineR: actcal data set data(actcal)  # We use only a sample of 300 cases set.seed(1) actcal <- actcal[sample(nrow(actcal), 300), ] actcal.lab <- c(\"> 37 hours\", \"19-36 hours\", \"1-18 hours\", \"no work\") actcal.seq <- seqdef(actcal, 13:24, labels = actcal.lab) #>  [>] 4 distinct states appear in the data:  #>      1 = A #>      2 = B #>      3 = C #>      4 = D #>  [>] state coding: #>        [alphabet]  [label]  [long label]  #>      1  A           A        > 37 hours #>      2  B           B        19-36 hours #>      3  C           C        1-18 hours #>      4  D           D        no work #>  [>] 300 sequences in the data set #>  [>] min/max sequence length: 12/12  # ex1 using weights data(ex1) ex1.seq <- seqdef(ex1, 1:13, weights = ex1$weights) #>  [>] found missing values ('NA') in sequence data #>  [>] preparing 7 sequences #>  [>] coding void elements with '%' and missing values with '*' #>  [!!] 1 empty sequence(s) with index: 7 #>       may produce inconsistent results. #>  [>] 4 distinct states appear in the data:  #>      1 = A #>      2 = B #>      3 = C #>      4 = D #>  [>] state coding: #>        [alphabet]  [label]  [long label]  #>      1  A           A        A #>      2  B           B        B #>      3  C           C        C #>      4  D           D        D #>  [>] sum of weights: 60 - min/max: 0/29.3 #>  [>] 7 sequences in the data set #>  [>] min/max sequence length: 0/13  # sequences sorted by age in 2000 and grouped by sex # with TraMineR::seqplot seqIplot(actcal.seq, group = actcal$sex, sortv = actcal$age00)  # with ggseqplot ggseqiplot(actcal.seq, group = actcal$sex, sortv = actcal$age00)   # sequences of unequal length with missing state, and weights seqIplot(ex1.seq)  ggseqiplot(ex1.seq)   # ... turn weights off and add border seqIplot(ex1.seq, weighted = FALSE, border = TRUE)  ggseqiplot(ex1.seq, weighted = FALSE, border = TRUE)"},{"path":"/reference/ggseqmsplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Modal State Sequence Plot — ggseqmsplot","title":"Modal State Sequence Plot — ggseqmsplot","text":"Function rendering modal state sequence plot ggplot2 wickham2016ggseqplot instead base R's plot function used TraMineR::seqplot gabadinho2011ggseqplot.","code":""},{"path":"/reference/ggseqmsplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modal State Sequence Plot — ggseqmsplot","text":"","code":"ggseqmsplot(   seqdata,   no.n = FALSE,   barwidth = NULL,   group = NULL,   weighted = TRUE,   with.missing = FALSE,   border = FALSE,   facet_ncol = NULL,   facet_nrow = NULL )"},{"path":"/reference/ggseqmsplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modal State Sequence Plot — ggseqmsplot","text":"seqdata State sequence object (class stslist) created TraMineR::seqdef function. .n specifies number (weighted) sequences shown (default TRUE) barwidth specifies width bars (default NULL); valid range: (0, 1] group vector length sequence data indicating group membership. NULL, distinct plot generated level group. weighted Controls weights (specified TraMineR::seqdef) used. Default TRUE, .e. available weights used .missing Specifies missing states considered computing state distributions (default FALSE). border TRUE bars plotted black outline; default FALSE (also accepts NULL) facet_ncol Number columns faceted (.e. grouped) plot facet_nrow Number rows faceted (.e. grouped) plot","code":""},{"path":"/reference/ggseqmsplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modal State Sequence Plot — ggseqmsplot","text":"modal state sequence plot. stored object resulting list object also contains data (long format) used rendering plot","code":""},{"path":"/reference/ggseqmsplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Modal State Sequence Plot — ggseqmsplot","text":"function uses TraMineR::seqmodst obtain modal states prevalence. requires input data (seqdata) stored state sequence object (class stslist) created TraMineR::seqdef function. data modal states prevalences reshaped plotted ggplot2::geom_bar. data specifications used rendering plot can obtained storing plot object. appearance plot can adjusted just like every ggplot (e.g., changing theme scale using + respective functions).","code":""},{"path":[]},{"path":"/reference/ggseqmsplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Modal State Sequence Plot — ggseqmsplot","text":"Marcel Raab","code":""},{"path":"/reference/ggseqmsplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modal State Sequence Plot — ggseqmsplot","text":"","code":"# Use example data from TraMineR: actcal data set data(actcal)  # We use only a sample of 300 cases set.seed(1) actcal <- actcal[sample(nrow(actcal), 300), ] actcal.lab <- c(\"> 37 hours\", \"19-36 hours\", \"1-18 hours\", \"no work\") actcal.seq <- seqdef(actcal, 13:24, labels = actcal.lab) #>  [>] 4 distinct states appear in the data:  #>      1 = A #>      2 = B #>      3 = C #>      4 = D #>  [>] state coding: #>        [alphabet]  [label]  [long label]  #>      1  A           A        > 37 hours #>      2  B           B        19-36 hours #>      3  C           C        1-18 hours #>      4  D           D        no work #>  [>] 300 sequences in the data set #>  [>] min/max sequence length: 12/12  # modal state sequence plot; grouped by sex # with TraMineR::seqplot seqmsplot(actcal.seq, group = actcal$sex)  # with ggseqplot ggseqmsplot(actcal.seq, group = actcal$sex)  # with ggseqplot and some layout changes ggseqmsplot(actcal.seq, group = actcal$sex, no.n = TRUE, border = FALSE, facet_nrow = 2)"},{"path":"/reference/ggseqmtplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean time plot — ggseqmtplot","title":"Mean time plot — ggseqmtplot","text":"Function rendering plot displaying mean time spent state state sequence object using ggplot2 wickham2016ggseqplot instead base R's plot function used TraMineR::seqplot gabadinho2011ggseqplot.","code":""},{"path":"/reference/ggseqmtplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean time plot — ggseqmtplot","text":"","code":"ggseqmtplot(   seqdata,   no.n = FALSE,   group = NULL,   weighted = TRUE,   with.missing = FALSE,   border = FALSE,   error.bar = NULL,   error.caption = TRUE,   facet_scale = \"fixed\",   facet_ncol = NULL,   facet_nrow = NULL )"},{"path":"/reference/ggseqmtplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean time plot — ggseqmtplot","text":"seqdata State sequence object (class stslist) created TraMineR::seqdef function. .n specifies number (weighted) sequences shown (default TRUE) group vector length sequence data indicating group membership. NULL, distinct plot generated level group. weighted Controls weights (specified TraMineR::seqdef) used. Default TRUE, .e. available weights used .missing Specifies missing states considered computing state distributions (default FALSE). border TRUE bars plotted black outline; default FALSE (also accepts NULL) error.bar allows add error bars either using standard deviation \"SD\" standard error \"SE\"; default plot without error bars error.caption caption added error bars displayed; default behavior can turned setting argument  \"FALSE\" facet_scale Specifies y-scale faceted plot \"fixed\" (default) \"free_y\" facet_ncol Number columns faceted (.e. grouped) plot facet_nrow Number rows faceted (.e. grouped) plot","code":""},{"path":"/reference/ggseqmtplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean time plot — ggseqmtplot","text":"mean time plot created using ggplot2. stored object resulting list object (class gg ggplot) also contains data used rendering plot","code":""},{"path":"/reference/ggseqmtplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mean time plot — ggseqmtplot","text":"information time spent different states obtained internal call TraMineR::seqmeant. requires input data (seqdata) stored state sequence object (class stslist) created TraMineR::seqdef function. resulting output prepared plotted ggplot2::geom_bar. data specifications used rendering plot can obtained storing plot object. appearance plot can adjusted just like every ggplot (e.g., changing theme scale using + respective functions).","code":""},{"path":[]},{"path":"/reference/ggseqmtplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Mean time plot — ggseqmtplot","text":"Marcel Raab","code":""},{"path":"/reference/ggseqmtplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean time plot — ggseqmtplot","text":"","code":"# Use example data from TraMineR: actcal data set data(actcal)  # We use only a sample of 300 cases set.seed(1) actcal <- actcal[sample(nrow(actcal), 300), ] actcal.lab <- c(\"> 37 hours\", \"19-36 hours\", \"1-18 hours\", \"no work\") actcal.seq <- seqdef(actcal, 13:24, labels = actcal.lab) #>  [>] 4 distinct states appear in the data:  #>      1 = A #>      2 = B #>      3 = C #>      4 = D #>  [>] state coding: #>        [alphabet]  [label]  [long label]  #>      1  A           A        > 37 hours #>      2  B           B        19-36 hours #>      3  C           C        1-18 hours #>      4  D           D        no work #>  [>] 300 sequences in the data set #>  [>] min/max sequence length: 12/12  # modal state sequence plot; grouped by sex # with TraMineR::seqplot seqmtplot(actcal.seq, group = actcal$sex)  # with ggseqplot ggseqmtplot(actcal.seq, group = actcal$sex)  # with ggseqplot using additional arguments and some adjustments ggseqmtplot(actcal.seq, no.n = TRUE, error.bar = \"SE\") +  coord_flip() +  theme(axis.text.y=element_blank(),        axis.ticks.y = element_blank(),        panel.grid.major.y = element_blank(),        legend.position = \"top\")"},{"path":"/reference/ggseqplot-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ggseqplot: Render Sequence Plots using 'ggplot2' — ggseqplot-package","title":"ggseqplot: Render Sequence Plots using 'ggplot2' — ggseqplot-package","text":"set wrapper functions mainly re-produces sequence plots rendered TraMineR::seqplot(). Whereas 'TraMineR' uses base R produce plots library draws 'ggplot2'. plots produced basis sequence object defined TraMineR::seqdef(). package automates reshaping plotting sequence data. Resulting plots class 'ggplot', .e. components can added tweaked using '+' regular 'ggplot2' functions.","code":""},{"path":[]},{"path":"/reference/ggseqplot-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ggseqplot: Render Sequence Plots using 'ggplot2' — ggseqplot-package","text":"Maintainer: Marcel Raab marcel.raab@gmail.com (ORCID)","code":""},{"path":"/reference/ggseqrfplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Relative Frequency Sequence Plot — ggseqrfplot","title":"Relative Frequency Sequence Plot — ggseqrfplot","text":"Function rendering sequence index plots ggplot2 instead base R's plot function used TraMineR::seqrfplot. Note ggseqrfplot uses patchwork combine different components plot. function documentation draw heavily TraMineR::seqrf.","code":""},{"path":"/reference/ggseqrfplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relative Frequency Sequence Plot — ggseqrfplot","text":"","code":"ggseqrfplot(   seqdata = NULL,   diss = NULL,   k = NULL,   sortv = \"mds\",   weighted = TRUE,   grp.meth = \"prop\",   squared = FALSE,   pow = NULL,   seqrfobject = NULL,   border = FALSE,   ylab = NULL,   yaxis = TRUE,   which.plot = \"both\",   quality = TRUE,   box.color = NULL,   box.fill = NULL,   box.alpha = NULL,   outlier.jitter.height = 0,   outlier.color = NULL,   outlier.fill = NULL,   outlier.shape = 19,   outlier.size = 1.5,   outlier.stroke = 0.5,   outlier.alpha = NULL )"},{"path":"/reference/ggseqrfplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relative Frequency Sequence Plot — ggseqrfplot","text":"seqdata State sequence object (class stslist) created TraMineR::seqdef function. seqdata ignored seqrfobject specified. diss pairwise dissimilarities sequences seqdata (see TraMineR::seqdist). diss ignored seqrfobject specified. k integer specifying number frequency groups. NULL, k set minimum 100 sum weights 10. k ignored seqrfobject specified. sortv optional sorting vector length nrow(diss) may used compute frequency groups. NULL, original data order used. mds (default), first MDS factor diss (diss^2 squared=TRUE) used. Ties randomly ordered. Also allows usage string inputs: \".start\" \".end\" (see ggseqiplot). sortv ignored seqrfobject specified. weighted Controls weights (specified TraMineR::seqdef) used. Default TRUE, .e. available weights used. grp.meth Character string. One \"prop\", \"first\", \"random\". Grouping method. See details. grp.meth ignored seqrfobject specified. squared Logical. medoids (computation sortv applicable) based squared dissimilarities? (default FALSE). squared ignored seqrfobject specified. pow Dissimilarity power exponent (typically 1 2) computation pseudo R2 F. NULL, pow set 1 squared = FALSE, 2 otherwise. pow ignored seqrfobject specified. seqrfobject object class seqrf generated TraMineR::seqrf. Default NULL; either seqrfobject seqdata diss specified border TRUE bars index plot plotted black outline; default FALSE (also accepts NULL) ylab character string specifying title y-axis. NULL axis title \"Frequency group\" yaxis Controls y-axis plotted. set TRUE, index frequency groups displayed. .plot character string specifying components relative frequency sequence plot displayed. Default \"\". set \"medoids\" index plot medoids shown. \"diss..med\" box plots group-specific distances medoids shown. quality specifies representation quality shown figure caption; default TRUE box.color specifies color boxplot borders; default \"black box.fill specifies fill color boxplots; default \"white\" box.alpha specifies alpha value boxplot fill color; default 1 outlier.jitter.height greater 0 outliers jittered vertically. greater .375 height automatically adjusted aligned box width. outlier.color, outlier.fill, outlier.shape, outlier.size, outlier.stroke, outlier.alpha parameters change appearance outliers. Uses defaults ggplot2::geom_boxplot","code":""},{"path":"/reference/ggseqrfplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relative Frequency Sequence Plot — ggseqrfplot","text":"relative frequency sequence plot using ggplot.","code":""},{"path":"/reference/ggseqrfplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Relative Frequency Sequence Plot — ggseqrfplot","text":"function renders relative frequency sequence plots using either internal call TraMineR::seqrf using object class \"seqrf\" generated TraMineR::seqrf. details technicalities refer excellent documentation TraMineR::seqrf. detailed account relative frequency index plot can found original contribution fasang2014;textualggseqplot. ggseqrfplot renders medoid sequences extracted TraMineR::seqrf internal call ggseqiplot. box plot depicting distances medoids ggseqrfplot uses geom_boxplot geom_jitter. latter used plotting outliers. Note ggseqrfplot renders box plots analogous produced TraMineR::seqrfplot. Actually, box plots produced TraMineR::seqrfplot  ggplot2::geom_boxplot might slightly differ due differences underlying computations grDevices::boxplot.stats ggplot2::stat_boxplot. Note ggseqrfplot uses patchwork combine different components plot. want adjust appearance composed plot, instance changing plot theme, consult documentation material patchwork. point ggseqrfplot support grouping option. plotting multiple groups, recommend produce group specific seqrfobjects plots arrange common plot using patchwork. See Example 6 vignette details: vignette(\"ggseqplot\", package = \"ggseqplot\")","code":""},{"path":[]},{"path":"/reference/ggseqrfplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Relative Frequency Sequence Plot — ggseqrfplot","text":"Marcel Raab","code":""},{"path":"/reference/ggseqrfplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relative Frequency Sequence Plot — ggseqrfplot","text":"","code":"# Load additional library for fine-tuning the plots library(patchwork)  # From TraMineR::seqprf # Defining a sequence object with the data in columns 10 to 25 # (family status from age 15 to 30) in the biofam data set data(biofam) biofam.lab <- c(\"Parent\", \"Left\", \"Married\", \"Left+Marr\",   \"Child\", \"Left+Child\", \"Left+Marr+Child\", \"Divorced\")  # Here, we use only 100 cases selected such that all elements # of the alphabet be present. # (More cases and a larger k would be necessary to get a meaningful example.) biofam.seq <- seqdef(biofam[501:600, 10:25], labels=biofam.lab,                      weights=biofam[501:600,\"wp00tbgs\"]) #>  [>] 8 distinct states appear in the data:  #>      1 = 0 #>      2 = 1 #>      3 = 2 #>      4 = 3 #>      5 = 4 #>      6 = 5 #>      7 = 6 #>      8 = 7 #>  [>] state coding: #>        [alphabet]  [label]  [long label]  #>      1  0           0        Parent #>      2  1           1        Left #>      3  2           2        Married #>      4  3           3        Left+Marr #>      5  4           4        Child #>      6  5           5        Left+Child #>      7  6           6        Left+Marr+Child #>      8  7           7        Divorced #>  [>] sum of weights: 111.62 - min/max: 0/4.17260217666626 #>  [>] 100 sequences in the data set #>  [>] min/max sequence length: 16/16 diss <- seqdist(biofam.seq, method = \"LCS\") #>  [>] 100 sequences with 8 distinct states #>  [>] creating a 'sm' with a substitution cost of 2 #>  [>] creating 8x8 substitution-cost matrix using 2 as constant value #>  [>] 76 distinct  sequences  #>  [>] min/max sequence lengths: 16/16 #>  [>] computing distances using the LCS metric #>  [>] elapsed time: 0.018 secs   # Using 12 groups and default MDS sorting # and original method by Fasang and Liao (2014)  # ... with TraMineR::seqrfplot (weights have to be turned off) seqrfplot(biofam.seq, weighted = FALSE, diss = diss, k = 12,           grp.meth=\"first\", which.plot = \"both\") #>  [>] Using k=12 frequency groups with grp.meth='first' #>  [>] Pseudo/medoid-based-R2: 0.4620155 #>  [>] Pseudo/medoid-based-F statistic: 6.870317, p-value: 3.09994e-08   # ... with ggseqrfplot ggseqrfplot(biofam.seq, weighted = FALSE, diss = diss, k = 12, grp.meth=\"first\") #>  [>] Using k=12 frequency groups with grp.meth='first' #>  [>] Pseudo/medoid-based-R2: 0.4620155 #>  [>] Pseudo/medoid-based-F statistic: 6.870317, p-value: 3.09994e-08   # Arrange sequences by a user specified sorting variable: # time spent in parental home; has ties parentTime <- seqistatd(biofam.seq)[, 1] #>  [>] computing state distribution for 100 sequences ... b.srf <- seqrf(biofam.seq, diss=diss, k=12, sortv=parentTime) #>  [>] Using k=12 frequency groups with grp.meth='prop' #>  [>] Pseudo/medoid-based-R2: 0.3064171 #>  [>] Pseudo/medoid-based-F statistic: 4.001018, p-value: 7.736543e-05 # ... with ggseqrfplot (and some extra annotation using patchwork) ggseqrfplot(seqrfobject = b.srf) +   plot_annotation(title = \"Sorted by time spent in parental home\",                   theme = theme(plot.title = element_text(hjust = 0.5, size = 18)))"},{"path":"/reference/ggseqrplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Representative Sequence plot — ggseqrplot","title":"Representative Sequence plot — ggseqrplot","text":"Function rendering representative sequence plots ggplot2 wickham2016ggseqplot instead base R's plot function used TraMineR::seqplot gabadinho2011ggseqplot.","code":""},{"path":"/reference/ggseqrplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Representative Sequence plot — ggseqrplot","text":"","code":"ggseqrplot(   seqdata,   diss,   group = NULL,   criterion = \"density\",   coverage = 0.25,   nrep = NULL,   pradius = 0.1,   dmax = NULL,   border = FALSE,   proportional = TRUE,   weighted = TRUE,   stats = TRUE,   colored.stats = NULL,   facet_ncol = NULL )"},{"path":"/reference/ggseqrplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Representative Sequence plot — ggseqrplot","text":"seqdata State sequence object (class stslist) created TraMineR::seqdef function. diss pairwise dissimilarities sequences seqdata (see TraMineR::seqdist) group vector length sequence data indicating group membership. NULL, distinct plot generated level group. criterion representativeness criterion sorting candidate list. One \"freq\" (sequence       frequency), \"density\" (neighborhood density), \"mscore\" (mean state frequency), \"dist\"       (centrality) \"prob\" (sequence likelihood). See details. coverage coverage threshold, .e., minimum proportion sequences representative       neighborhood (neighborhood radius defined pradius). nrep number representative sequences. NULL (default), size representative set      controlled coverage. pradius neighborhood radius percentage maximum (theoretical) distance dmax. Defaults 0.1 (10%). Sequence \\(y\\) redundant sequence \\(x\\) neighborhood \\(x\\), .e., within distance pradius*dmax \\(x\\). dmax maximum theoretical distance. dmax value used derive neighborhood radius pradius*dmax. NULL, value dmax derived dissimilarity matrix. border TRUE bars plotted black outline; default FALSE (also accepts NULL) proportional TRUE (default), sequence heights displayed proportional number represented sequences weighted Controls weights (specified TraMineR::seqdef) used. Default TRUE, .e. available weights used stats TRUE (default), mean discrepancy subset defined sequences attributed one representative sequence mean distance representative sequence displayed. colored.stats specifies representatives stats plot color coded; recommended number representatives small; set NULL (default) colors used n rep. <= 10; use TRUE FALSE change manually facet_ncol specifies number columns plot (relevant !.null(group))","code":""},{"path":"/reference/ggseqrplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Representative Sequence plot — ggseqrplot","text":"representative sequence plot using ggplot.","code":""},{"path":"/reference/ggseqrplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Representative Sequence plot — ggseqrplot","text":"representative sequence plot displays set distinct sequences sequence index plot. set representative sequences extracted sequence data internal call TraMineR::seqrep according criteria listed arguments section . extracted sequences plotted call ggseqiplot uses ggplot2::geom_rect render sequences. stats = TRUE index plots complemented information \"quality\" representative sequences. details representative sequence plots see gabadinho2011a;textualggseqplot documentation TraMineR::plot.stslist.rep, TraMineR::seqplot, TraMineR::seqrep. Note ggseqrplot uses patchwork combine different components plot. want adjust appearance composed plot, instance changing plot theme, consult documentation material patchwork.","code":""},{"path":[]},{"path":"/reference/ggseqrplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Representative Sequence plot — ggseqrplot","text":"Marcel Raab","code":""},{"path":"/reference/ggseqrplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Representative Sequence plot — ggseqrplot","text":"","code":"# Use examples from TraMineR library(TraMineR) # Defining a sequence object with the data in columns 10 to 25 # (family status from age 15 to 30) in the biofam data set data(biofam) # Use sample of 300 cases set.seed(123) biofam <- biofam[sample(nrow(biofam),150),] biofam.lab <- c(\"Parent\", \"Left\", \"Married\", \"Left+Marr\", \"Child\", \"Left+Child\", \"Left+Marr+Child\", \"Divorced\") biofam.seq <- seqdef(biofam, 10:25, labels=biofam.lab) #>  [>] 8 distinct states appear in the data:  #>      1 = 0 #>      2 = 1 #>      3 = 2 #>      4 = 3 #>      5 = 4 #>      6 = 5 #>      7 = 6 #>      8 = 7 #>  [>] state coding: #>        [alphabet]  [label]  [long label]  #>      1  0           0        Parent #>      2  1           1        Left #>      3  2           2        Married #>      4  3           3        Left+Marr #>      5  4           4        Child #>      6  5           5        Left+Child #>      7  6           6        Left+Marr+Child #>      8  7           7        Divorced #>  [>] 150 sequences in the data set #>  [>] min/max sequence length: 16/16  # Computing the distance matrix biofam.dhd <- seqdist(biofam.seq, method=\"DHD\") #>  [>] 150 sequences with 8 distinct states #>  [>] creating a 'sm' with the costs derived from the transition rates #>  [>] creating time varying substitution-cost matrix using transition rates ... #>  [>] computing time varying transition probabilities for states 0/1/2/3/4/5/6/7 ... #>  [>] 103 distinct  sequences  #>  [>] min/max sequence lengths: 16/16 #>  [>] computing distances using the DHD metric #>  [>] elapsed time: 0.038 secs  # Representative sequence  plot (using defaults) # ... with TraMineR::seqplot seqrplot(biofam.seq, diss = biofam.dhd) #>  [>] number of objects (sum of weights): 150 #>  [>] max. distance: 63.7 #>  [>] neighborhood radius: 6.37 #>  [>] 4 representative(s) selected, coverage=26% (threshold=25%) #>  [>] 103 distinct sequence(s)   # ... with ggseqrplot ggseqrplot(biofam.seq, diss = biofam.dhd) #>  [>] number of objects (sum of weights): 150 #>  [>] max. distance: 63.7 #>  [>] neighborhood radius: 6.37 #>  [>] 4 representative(s) selected, coverage=26% (threshold=25%) #>  [>] 103 distinct sequence(s)"},{"path":"/reference/ggseqtrplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequence Transition Rate Plot — ggseqtrplot","title":"Sequence Transition Rate Plot — ggseqtrplot","text":"Function plotting transition rate matrix sequence states internally computed TraMineR::seqtrate gabadinho2011ggseqplot. Plot generated using ggplot2 wickham2016ggseqplot.","code":""},{"path":"/reference/ggseqtrplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequence Transition Rate Plot — ggseqtrplot","text":"","code":"ggseqtrplot(   seqdata,   dss = TRUE,   group = NULL,   no.n = FALSE,   weighted = TRUE,   with.missing = FALSE,   labsize = NULL,   axislabs = \"labels\",   x_n.dodge = 1,   facet_ncol = NULL,   facet_nrow = NULL )"},{"path":"/reference/ggseqtrplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequence Transition Rate Plot — ggseqtrplot","text":"seqdata State sequence object (class stslist) created TraMineR::seqdef function. dss specifies transition rates computed STS DSS (default) sequences group vector length sequence data indicating group membership. NULL, distinct plot generated level group. .n specifies number (weighted) sequences shown grouped (faceted) graph weighted Controls weights (specified TraMineR::seqdef) used. Default TRUE, .e. available weights used .missing Specifies missing state considered computing transition rates (default FALSE). labsize Specifies font size labels within tiles (specified ggplot2's default used) axislabs specifies sequence object's long \"labels\" (default) state names \"alphabet\" attribute used. x_n.dodge allows print labels x-axis multiple rows avoid overlapping. facet_ncol Number columns faceted (.e. grouped) plot facet_nrow Number rows faceted (.e. grouped) plot","code":""},{"path":"/reference/ggseqtrplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequence Transition Rate Plot — ggseqtrplot","text":"tile plot transition rates.","code":""},{"path":"/reference/ggseqtrplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sequence Transition Rate Plot — ggseqtrplot","text":"transition rates obtained internal call TraMineR::seqtrate. requires input data (seqdata) stored state sequence object (class stslist) created TraMineR::seqdef function. STS based transition rates tend dominated high values diagonal, might worthwhile examine DSS sequences instead (dss = TRUE)). case resulting plot shows transition rates episodes distinct states. case (DSS STS) transitions rates reshaped long data format enable plotting ggplot2. resulting output prepared plotted  ggplot2::geom_tile. data specifications used rendering plot can obtained storing plot object. appearance plot can adjusted just like every ggplot (e.g., changing theme scale using + respective functions).","code":""},{"path":[]},{"path":"/reference/ggseqtrplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sequence Transition Rate Plot — ggseqtrplot","text":"Marcel Raab","code":""},{"path":"/reference/ggseqtrplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequence Transition Rate Plot — ggseqtrplot","text":"","code":"# Use example data from TraMineR: biofam data set data(biofam)  # We use only a sample of 300 cases set.seed(10) biofam <- biofam[sample(nrow(biofam),300),] biofam.lab <- c(\"Parent\", \"Left\", \"Married\", \"Left+Marr\",                 \"Child\", \"Left+Child\", \"Left+Marr+Child\", \"Divorced\") biofam.seq <- seqdef(biofam, 10:25, labels=biofam.lab, weights = biofam$wp00tbgs) #>  [>] 8 distinct states appear in the data:  #>      1 = 0 #>      2 = 1 #>      3 = 2 #>      4 = 3 #>      5 = 4 #>      6 = 5 #>      7 = 6 #>      8 = 7 #>  [>] state coding: #>        [alphabet]  [label]  [long label]  #>      1  0           0        Parent #>      2  1           1        Left #>      3  2           2        Married #>      4  3           3        Left+Marr #>      5  4           4        Child #>      6  5           5        Left+Child #>      7  6           6        Left+Marr+Child #>      8  7           7        Divorced #>  [>] sum of weights: 330.07 - min/max: 0/6.02881860733032 #>  [>] 300 sequences in the data set #>  [>] min/max sequence length: 16/16  # Basic transition rate plot (with adjusted x-axis labels) ggseqtrplot(biofam.seq, x_n.dodge = 2) #>  [>] computing transition probabilities for states 0/1/2/3/4/5/6/7 ...   # Transition rate with group variable (with and without weights) ggseqtrplot(biofam.seq, group=biofam$sex, x_n.dodge = 2) #>  [>] computing transition probabilities for states 0/1/2/3/4/5/6/7 ... #>  [>] computing transition probabilities for states 0/1/2/3/4/5/6/7 ...  ggseqtrplot(biofam.seq, group=biofam$sex, x_n.dodge = 2, weighted = FALSE) #>  [>] computing transition probabilities for states 0/1/2/3/4/5/6/7 ... #>  [>] computing transition probabilities for states 0/1/2/3/4/5/6/7 ..."},{"path":"/news/index.html","id":"ggseqplot-085","dir":"Changelog","previous_headings":"","what":"ggseqplot 0.8.5","title":"ggseqplot 0.8.5","text":"CRAN release: 2024-10-29 fixed #5: group vector numeric, grouped plots now sorted number instead order appearance .data tidyselect expressions deprecated tidyselect 1.2.0; update takes care change fixed incorrect group handling ggseqfplot (issue Reported Gilbert Ritschard)","code":""},{"path":"/news/index.html","id":"ggseqplot-084","dir":"Changelog","previous_headings":"","what":"ggseqplot 0.8.4","title":"ggseqplot 0.8.4","text":"CRAN release: 2024-05-17 fixed #3: haven_labelled group vars converted factors plotting fixed #4: legends display key glyph non-visited states (wasn’t case anymore due ggplot2 release 3.5.0)","code":""},{"path":"/news/index.html","id":"ggseqplot-083","dir":"Changelog","previous_headings":"","what":"ggseqplot 0.8.3","title":"ggseqplot 0.8.3","text":"CRAN release: 2023-09-22 added missing minimum versions dependencies & imports (ggplot2, dplyr, forcats) changed default sorting sequences ggseqrfplot match behavior TraMineR::seqrfplot added TraMineR ggplot2 dependencies","code":""},{"path":"/news/index.html","id":"ggseqplot-082","dir":"Changelog","previous_headings":"","what":"ggseqplot 0.8.2","title":"ggseqplot 0.8.2","text":"CRAN release: 2023-03-15 implemented changes required due recent tidyverse updates removed startup message","code":""},{"path":"/news/index.html","id":"ggseqplot-081","dir":"Changelog","previous_headings":"","what":"ggseqplot 0.8.1","title":"ggseqplot 0.8.1","text":"CRAN release: 2022-10-11 reverted TraMiner Import removed unnecessary Suggests TraMineRextras revised vignette, tests, documentation accordingly harmonized example code","code":""},{"path":"/news/index.html","id":"ggseqplot-080","dir":"Changelog","previous_headings":"","what":"ggseqplot 0.8.0","title":"ggseqplot 0.8.0","text":"CRAN release: 2022-09-07 complete revision ggseqrfplot TraMineR release 2.2-5 (special thanks Gilbert Ritschard support) added TraMineR dependency group argument now respects order grouping variable rendering faceted plots (issue raised bv Lucille Mattijssen)","code":""},{"path":"/news/index.html","id":"ggseqplot-072","dir":"Changelog","previous_headings":"","what":"ggseqplot 0.7.2","title":"ggseqplot 0.7.2","text":"CRAN release: 2022-08-05 fixed sorting issue y-axis labels grouped iplots allow additional facet_wrap arguments change plot appearance","code":""},{"path":"/news/index.html","id":"ggseqplot-071","dir":"Changelog","previous_headings":"","what":"ggseqplot 0.7.1","title":"ggseqplot 0.7.1","text":"Tweaking theme: adding ticks x axis line","code":""},{"path":"/news/index.html","id":"ggseqplot-070","dir":"Changelog","previous_headings":"","what":"ggseqplot 0.7.0","title":"ggseqplot 0.7.0","text":"Added option break dplots state (dissect) Set minimum R version R’s new pipe (#1, @cbrueffer)","code":""},{"path":"/news/index.html","id":"ggseqplot-062","dir":"Changelog","previous_headings":"","what":"ggseqplot 0.6.2","title":"ggseqplot 0.6.2","text":"CRAN release: 2022-07-04 Added NEWS.md file track changes package.","code":""}]
